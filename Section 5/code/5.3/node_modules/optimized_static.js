
// static.js
//
// Packt Publishing - Build a Network Application with Node
// Serve static image files with caching and compression

var errUtil = require("err_util"),
  path = require("path"),
  fs = require("fs"),
  mime = require("mime"),
  zlib = require('zlib');

module.exports = function(req, res) {

  var stream, resHeaders, encoding, encodingRegex,
    filePath = path.normalize("." + req.url),
    contentType = mime.lookup(filePath);

  fs.stat(filePath, function(err, stats) {

    if (typeof stats == "undefined") return errUtil.report(null, res, 404, "File not found: " + filePath);
    if (err) return errUtil.report(err, res);
    if (stats.isDirectory() || !/image\/(jpeg|gif|png)/.test(contentType)) return errUtil.report(null, res, 403, "Forbidden");

    stream = fs.createReadStream(filePath);

    resHeaders = {
      "Content-Type":   contentType,
      "Last-Modified":  stats.mtime,
      "Cache-Control":  "public, max-age=604800", // Cache for 7 days
      "Expires":        new Date(Date.now() + 604800000).toUTCString()
    };

    stream.once("readable", function() {
      encoding = req.headers['accept-encoding'];
      encodingRegex = /(gzip|deflate)/;
      if (encodingRegex.test(encoding)) {
        resHeaders['content-encoding'] = encoding.match(encodingRegex)[0];
        res.writeHead(200, resHeaders);
        stream.pipe(zlib.createGzip()).pipe(res);
        return;
      }
      res.writeHead(200, resHeaders);
      stream.pipe(res);

    })
    .on('error', function(err) {
      errUtil.report(err, res);
    });

  });
};